{% extends "@ChamiloCore/Layout/layout_one_col.html.twig" %}
{% from '@ChamiloCore/Admin/Settings/actions.html.twig' import update %}
{% set namespace = app.request.get('namespace') %}

{% block content %}
    <div class="flex">
        <div class="w-1/5">
            {% include '@ChamiloCore/Admin/Settings/menu.html.twig' %}
        </div>
        <div class="w-4/5">
            <div class="q-card p-4">

                <form class="w-full form-horizontal"
                      action="{{ path('chamilo_platform_settings_search', {'keyword': keyword}) }}"
                      method="post"
                >
                    {{ form_widget(search_form) }}
                </form>

                <hr class="my-6 border-gray-25" />

                <div class="row">
                    <div class="col-md-12">
                        <div class="box box-primary">
                            <div class="box-body">
                                {{ form_errors(form) }}
                                <form
                                        class="form-horizontal"
                                        action="{{ path('chamilo_platform_settings', { 'namespace': namespace, 'keyword': keyword } ) }}"
                                        method="post"
                                        novalidate
                                >
                                    {% for field in form %}
                                        {% set fieldName = field.vars.name %}
                                        <div class="mb-6 p-5 rounded-lg border border-gray-50 shadow-sm bg-white hover:shadow transition">
                                            <div class="flex justify-between items-start mb-3 border-l-4 border-primary pl-4">
                                                <h3 class="text-gray-90 text-body-1 font-semibold">
                                                    {{ field.vars.label|trans }}
                                                </h3>

                                                {% if template_map[fieldName] is defined %}
                                                    <a href="#"
                                                       class="text-info hover:text-info-dark show-template flex items-center gap-2"
                                                       data-template-id="{{ template_map[fieldName] }}"
                                                       title="{{ 'Show JSON Template'|trans }}">
                                                        <i class="mdi mdi-information-outline text-info text-lg"></i>
                                                        <span class="text-body-2">{{ 'Show JSON Template'|trans }}</span>
                                                    </a>
                                                {% endif %}
                                            </div>

                                            <div class="mb-2">
                                                {{ form_widget(field, {
                                                    'attr': {
                                                        'class': 'w-full rounded border border-gray-25 focus:border-primary focus:ring focus:ring-primary/30 transition'
                                                    }
                                                }) }}
                                            </div>

                                            {% if field.vars.help is not empty %}
                                                <p class="text-gray-50 text-body-2 italic pl-3">
                                                    {{ field.vars.help|raw }}
                                                </p>
                                            {% endif %}

                                            {{ form_errors(field) }}
                                        </div>
                                    {% endfor %}




                                    {{ update() }}
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    {# MODAL overlay #}
    <div id="jsonTemplateOverlay"
         class="fixed inset-0 bg-gray-90/50 hidden z-40"></div>

    <div id="jsonTemplateModal"
         class="fixed inset-0 hidden z-50 flex items-center justify-center">
        <div class="bg-white rounded-lg border border-gray-50 shadow-2xl max-w-3xl w-full mx-4">
            <div class="flex justify-between items-center px-6 py-4 border-b border-gray-25">
                <h2 class="text-lg font-bold text-gray-90" id="jsonTemplateModalLabel">
                    {{ 'JSON Template'|trans }}
                </h2>
                <button id="closeJsonTemplateModal" class="text-gray-50 hover:text-gray-90 text-2xl leading-none">
                    &times;
                </button>
            </div>
            <div class="p-6">
                <div id="jsonTemplateDescription" class="mb-4 text-gray-90 border-gray-20 text-body-2"></div>
                <pre id="jsonTemplateContent"
                     class="bg-gray-15 p-4 rounded text-sm text-gray-90 overflow-auto max-h-[50vh]"></pre>
            </div>
        </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('.show-template').forEach(link => {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            const templateId = link.dataset.templateId;

            fetch('/admin/settings/template/' + templateId)
              .then(response => response.json())
              .then(data => {
                if (data.json_example) {
                  document.getElementById('jsonTemplateModalLabel').innerText = data.variable || '{{ "JSON Template"|trans }}';
                  document.getElementById('jsonTemplateDescription').innerText = data.description || '';
                  try {
                    const jsonObject = JSON.parse(data.json_example);
                    document.getElementById('jsonTemplateContent').innerText = JSON.stringify(jsonObject, null, 2);
                  } catch (e) {
                    document.getElementById('jsonTemplateContent').innerText = data.json_example;
                  }

                  document.getElementById('jsonTemplateOverlay').classList.remove('hidden');
                  document.getElementById('jsonTemplateModal').classList.remove('hidden');
                } else {
                  alert('{{ "Template not found."|trans }}');
                }
              });
          });
        });

        document.getElementById('closeJsonTemplateModal').addEventListener('click', () => {
          document.getElementById('jsonTemplateOverlay').classList.add('hidden');
          document.getElementById('jsonTemplateModal').classList.add('hidden');
        });
      });
    </script>
{% endblock %}
